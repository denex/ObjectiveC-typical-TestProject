Тестовое задание:

===============================================================

Реализовать простое iOS-приложение с базовыми функциями:

Общее:
1. Иконка приложения должна без нативного эффекта светотени.
2. Сплэш-экран (картинка при загрузке приложения) должен показываться без отображения статус-панели.
3. В самом приложении показывать статус-панель черного цвета.
4. В приложении показывать вверхнюю панель с именем текущего экрана и нижнее меню (TabBar) с тремя кнопками:
- List
- Gallery
- Service
Картинки к кнопкам меню можно бесплатно взять здесь: http://glyphish.com

Экраны:
1. List:
1.1. Проработать модель данных, реализующую организационную структуру предприятия с точки зрения ООП. Реализовать следующие сущности с наследованием от базового класса:
а) Руководство
б) Сотрудники
в) Бухгалтерия
У всех сотрудников должны бывть параметры "Зарплата", "ФИО".
У руководства, дополнительно, должен быть параметр "Часы приема".
У сотрудников "Номер рабочего места", "Обеденное время".
У бухгалтерии "Номер рабочего места", "Обеденное время", "Тип бухгалтера" (начисление зарплаты/учет материалов).
1.2. Вывести список (UITableView) редактируемых пунктов:
- В таблице сделать три секции, соответсвующие сотрудникам. В отображении секции показывать картинку соответствующую типу секции.
- Имя пункта, детальная информация, зависящая от типа данных.
1.3. Вверху слева на вверхней панели сделать кнопку Edit, которая включает режим удаления и ручной сортировки в пределах секции (по умолчанию выводить список отсортированным по имени).
1.4. Вверху справа сделать кнопку [+], которая открывает подэкран с формой добавления нового пункта
- Вверху слева Back, вверху справа - синяя кнопка Save.
- Ниже переключатель типа сотрудника
- Ниже параметры, зависящие от выбранного типа сотрудника.
1.5. При клике на пункт в списке открывать форму просмотра. На форме просмотра должна быть кнопка "Edit" - показывающая интерфейс редактирования (индентичную форме добавления нового пункта). Т.е. поведение аналогичное стандартному "Contacts" приложению.
1.6. При изменении типа сотрудника в форме таблица должна переносить данного сотрудника в соответсвующую секцию.
Примечание: приложение должно запоминать все вносимые в список изменения (добавление новых пунктов, редактирование существующих, изменение порядка элементов) - т.е. после перезапуска приложения всё должно быть так, как было до закрытия приложения.

2. Gallery:
2.1. По середине на бОльшую часть экрана вывести изображение (фотографию).
2.2. Сделать элементы управления:
2.2.1. Полупрозрачный тулбар сверху с кнопками Вперед (переход на следующую картинку) и Назад (переход на предудущую картинку).
2.2.2. Реализовать возможность листать фотографии вперед-назад пальцем, а не кнопками (для примера см. стандартное приложение Photos (Фотографии) при просмотре отдельных фотографий).
2.3. Минимальное количество картинок в галерее - 15 шт.
2.4. Картинки должны загружаться по мере надобности и выгружаться, если не нужны - для экономии памяти (т.е. в памяти должны быть только текущая, +1 от текущей и -1 от текущей).
2.5. Поведение при листании должно быть аналогично стандартному Photos.app

3. Service:
3.1. Получить от данного URL-а XML-данные: http://bash.zennexgroup.com/service/ru/get.php?type=last
3.2. Вывести полученные данные как статичный скроллируемый список, в произвольном виде (на свой выбор - главное чтобы было читаемо).
3.3. Во время загрузки показывать троббер (крутилку загрузки).

Технические требования:
1. Тестовое задание должно быть выполнено без использования:
1.1. Storyboard
1.2. ARC
2. Проект должен собираться как есть, то есть все библиотеки, которые нужны для сборки, уже должны быть в проекте без необходимости скачивать какие-либо внещние библиотеки (CocoaPods и т.п.)

===============================================================
